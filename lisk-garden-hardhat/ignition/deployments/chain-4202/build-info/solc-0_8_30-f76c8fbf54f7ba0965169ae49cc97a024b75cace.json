{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_30-f76c8fbf54f7ba0965169ae49cc97a024b75cace",
  "solcVersion": "0.8.30",
  "solcLongVersion": "0.8.30+commit.73712a01",
  "userSourceNameMap": {
    "contracts/LiskGardenChallenge.sol": "project/contracts/LiskGardenChallenge.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "prague",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/LiskGardenChallenge.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\ncontract LiskGarden {\n    // ============================================\n    // BAGIAN 1: ENUM & STRUCT\n    // ============================================\n    enum GrowthStage { SEED, SPROUT, GROWING, BLOOMING }\n\n    struct Plant {\n        uint256 id;\n        address owner;\n        GrowthStage stage;\n        uint256 plantedDate;\n        uint256 lastWatered;\n        uint8 waterLevel;     // 0 - 100\n        bool exists;\n        bool isDead;\n    }\n\n    // ============================================\n    // BAGIAN 2: STATE VARIABLES\n    // ============================================\n    mapping(uint256 => Plant) public plants;          // plantId -> Plant\n    mapping(address => uint256[]) private userPlants; // pemilik -> daftar plantId\n    uint256 public plantCounter;\n    address public owner;\n\n    // ============================================\n    // BAGIAN 3: CONSTANTS (Game Parameters)\n    // ============================================\n    uint256 public constant PLANT_PRICE = 0.001 ether;\n    uint256 public constant REWARD = 0.003 ether;\n\n    // Interval stage 1 menit\n    uint256 public constant STAGE_DURATION = 1 minutes;\n\n    // Water depletion tiap 30 detik, berkurang 2 poin\n    uint256 public constant WATER_DEPLETION_INTERVAL = 30 seconds;\n    uint256 public constant WATER_DEPLETION_RATE = 2;\n\n    // ============================================\n    // BAGIAN 4: EVENTS\n    // ============================================\n    event PlantSeeded(address indexed owner, uint256 indexed plantId);\n    event PlantWatered(uint256 indexed plantId, uint8 newWaterLevel);\n    event PlantHarvested(uint256 indexed plantId, address indexed owner, uint256 reward);\n    event StageAdvanced(uint256 indexed plantId, GrowthStage newStage);\n    event PlantDied(uint256 indexed plantId);\n\n    // ============================================\n    // BAGIAN 5: CONSTRUCTOR\n    // ============================================\n    constructor() {\n        owner = msg.sender;\n    }\n\n    // ============================================\n    // BAGIAN 6: PLANT SEED\n    // ============================================\n    function plantSeed() external payable returns (uint256) {\n        require(msg.value >= PLANT_PRICE, \"Saldo kurang: 0.001 ETH\");\n\n        plantCounter++;\n        uint256 newId = plantCounter;\n\n        plants[newId] = Plant({\n            id: newId,\n            owner: msg.sender,\n            stage: GrowthStage.SEED,\n            plantedDate: block.timestamp,\n            lastWatered: block.timestamp,\n            waterLevel: 100,\n            exists: true,\n            isDead: false\n        });\n\n        userPlants[msg.sender].push(newId);\n\n        emit PlantSeeded(msg.sender, newId);\n        return newId;\n    }\n\n    // ============================================\n    // BAGIAN 7: WATER SYSTEM\n    // ============================================\n    function calculateWaterLevel(uint256 plantId) public view returns (uint8) {\n        Plant memory plant = plants[plantId];\n        if (!plant.exists || plant.isDead) return 0;\n\n        uint256 timeSince = block.timestamp - plant.lastWatered;\n        uint256 intervals = timeSince / WATER_DEPLETION_INTERVAL;\n        uint256 waterLost = intervals * WATER_DEPLETION_RATE;\n\n        if (waterLost >= plant.waterLevel) return 0;\n        return uint8(plant.waterLevel - waterLost);\n    }\n\n    function updateWaterLevel(uint256 plantId) internal {\n        Plant storage plant = plants[plantId];\n        if (!plant.exists) return;\n\n        uint8 currentWater = calculateWaterLevel(plantId);\n        plant.waterLevel = currentWater;\n\n        if (currentWater == 0 && !plant.isDead) {\n            plant.isDead = true;\n            emit PlantDied(plantId);\n        }\n    }\n\n    // Cek saldo contract\n    function getBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function waterPlant(uint256 plantId) external {\n        Plant storage plant = plants[plantId];\n        require(plant.exists, \"Plant tidak ada\");\n        require(plant.owner == msg.sender, \"Bukan pemilik plant\");\n        require(!plant.isDead, \"Plant sudah mati\");\n\n        // (opsional) update dulu biar realistis sebelum refill\n        updateWaterLevel(plantId);\n        require(!plant.isDead, \"Plant mati karena kehabisan air\");\n\n        plant.waterLevel = 100;\n        plant.lastWatered = block.timestamp;\n\n        emit PlantWatered(plantId, plant.waterLevel);\n        updatePlantStage(plantId);\n    }\n\n    // ============================================\n    // BAGIAN 8: STAGE & HARVEST\n    // ============================================\n    function updatePlantStage(uint256 plantId) public {\n        Plant storage plant = plants[plantId];\n        require(plant.exists, \"Plant tidak ada\");\n\n        updateWaterLevel(plantId);\n        if (plant.isDead) return;\n\n        uint256 timeSincePlanted = block.timestamp - plant.plantedDate;\n        GrowthStage oldStage = plant.stage;\n\n        if (timeSincePlanted >= 3 * STAGE_DURATION) {\n            plant.stage = GrowthStage.BLOOMING;\n        } else if (timeSincePlanted >= 2 * STAGE_DURATION) {\n            plant.stage = GrowthStage.GROWING;\n        } else if (timeSincePlanted >= STAGE_DURATION) {\n            plant.stage = GrowthStage.SPROUT;\n        } else {\n            plant.stage = GrowthStage.SEED;\n        }\n\n        if (plant.stage != oldStage) {\n            emit StageAdvanced(plantId, plant.stage);\n        }\n    }\n\n    function harvestPlant(uint256 plantId) external {\n        Plant storage plant = plants[plantId];\n        require(plant.exists, \"Plant tidak ada\");\n        require(plant.owner == msg.sender, \"Bukan pemilik plant\");\n        require(!plant.isDead, \"Plant mati, tidak bisa panen\");\n\n        updatePlantStage(plantId);\n        require(plant.stage == GrowthStage.BLOOMING, \"Belum mekar\");\n\n        // state change dulu (anti-reentrancy basic)\n        plant.exists = false;\n\n        emit PlantHarvested(plantId, msg.sender, REWARD);\n\n        require(address(this).balance >= REWARD, \"Saldo kontrak kurang\");\n        (bool ok, ) = payable(msg.sender).call{value: REWARD}(\"\");\n        require(ok, \"Transfer reward gagal\");\n    }\n\n    // ============================================\n    // HELPER FUNCTIONS\n    // ============================================\n    function getPlant(uint256 plantId) external view returns (Plant memory) {\n        Plant memory plant = plants[plantId];\n        // hitung level air aktual secara on-the-fly\n        plant.waterLevel = calculateWaterLevel(plantId);\n        return plant;\n    }\n\n    function getUserPlants(address user) external view returns (uint256[] memory) {\n        return userPlants[user];\n        // (kalau mau publik: ubah mapping ke public lalu bikin getter otomatis)\n    }\n\n    function withdraw() external {\n        require(msg.sender == owner, \"Bukan owner\");\n        (bool ok, ) = payable(owner).call{value: address(this).balance}(\"\");\n        require(ok, \"Withdraw gagal\");\n    }\n\n    receive() external payable {}\n}\n"
      }
    }
  }
}